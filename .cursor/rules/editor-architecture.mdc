---
description: Editor component architecture and development guidelines
---

# Editor Architecture Guidelines

## Main Editor Components

The editor is built with a sophisticated React-based architecture:

### Core Components
- **[src/components/editor/code-editor.tsx](mdc:src/components/editor/code-editor.tsx)** - Main editor wrapper component
- **[src/components/editor/core/text-editor.tsx](mdc:src/components/editor/core/text-editor.tsx)** - Core text editing functionality (1,323 lines)
- **[src/components/editor/core/line-based-editor.tsx](mdc:src/components/editor/core/line-based-editor.tsx)** - Line-based editor implementation

### Editor Sub-components
- **Core**: `src/components/editor/core/` - Core editor functionality
- **Overlays**: `src/components/editor/overlays/` - Editor overlays and UI elements
- **Rendering**: `src/components/editor/rendering/` - Rendering components

### State Management
Editor state is managed through multiple Zustand stores in `src/stores/editor-*.ts`:
- `editor-state-store.ts` - Core editor state
- `editor-cursor-store.ts` - Cursor management
- `editor-view-store.ts` - View state
- `editor-settings-store.ts` - Editor settings
- And many more specialized stores

## Development Guidelines

### Adding New Editor Features
1. **State Management**: Use existing Zustand stores or create new ones
2. **UI Components**: Add to appropriate subdirectory in `src/components/editor/`
3. **Styling**: Use CSS variables for theme consistency
4. **Performance**: Leverage existing performance hooks and optimizations

### Editor Styling
- **Scrollbars**: Must be hidden using `scrollbar-width: none` and `display: none`
- **Fonts**: Use `var(--editor-font-family)` for consistent font rendering
- **Colors**: Use CSS variables like `var(--color-text)`, `var(--color-primary-bg)`
- **Git Gutter**: Use theme-aware colors defined in editor stylesheet

### Key Architecture Patterns

#### Store Integration
```typescript
const { setCursorVisibility, restorePositionForFile } = useEditorCursorStore.use.actions();
const activeBufferId = useBufferStore.use.activeBufferId();
```

#### Performance Optimization
```typescript
import { useDebouncedFunction, usePerformanceMonitor, useRAFCallback } from "@/hooks/use-performance";
```

#### Theme Integration
```typescript
const { settings } = useSettingsStore();
const zoomLevel = useZoomStore.use.editorZoomLevel();
```

## File Organization

### Component Structure
```
src/components/editor/
├── code-editor.tsx          # Main wrapper
├── core/                    # Core functionality
│   ├── text-editor.tsx      # Main text editor
│   ├── line-based-editor.tsx
│   └── keyboard-shortcuts.ts
├── overlays/                # UI overlays
│   ├── completion-dropdown.tsx
│   ├── hover-tooltip.tsx
│   └── editor-context-menu.tsx
└── rendering/               # Rendering components
    ├── editor-viewport.tsx
    ├── line-renderer.tsx
    └── line-gutter.tsx
```

### State Stores
```
src/stores/
├── editor-state-store.ts
├── editor-cursor-store.ts
├── editor-view-store.ts
├── editor-settings-store.ts
└── editor-*.ts              # Other specialized stores
```

## Best Practices

1. **Modularity**: Keep editor functionality in separate, focused components
2. **State Management**: Use Zustand stores for complex state, local state for simple UI
3. **Performance**: Use existing performance hooks and avoid unnecessary re-renders
4. **Accessibility**: Maintain keyboard navigation and screen reader support
5. **Theme Consistency**: Always use CSS variables for colors and styling