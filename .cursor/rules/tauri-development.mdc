---
description: Tauri desktop application development workflow and architecture guidelines
---

# Tauri Development Guidelines

## Architecture Overview

This is a **Tauri desktop application** with:
- **Frontend**: React/TypeScript (in `src/`)
- **Backend**: Rust (in `src-tauri/src/`)
- **Communication**: IPC (Inter-Process Communication) instead of HTTP APIs

## Backend-Frontend Communication

### Commands (Request/Response Pattern)
Instead of REST endpoints, use Tauri commands:

**Backend (Rust):**
```rust
#[tauri::command]
pub fn get_user_data(user_id: String) -> Result<UserData, String> {
    // Implementation
    Ok(user_data)
}
```

**Frontend (TypeScript):**
```typescript
import { invoke } from "@tauri-apps/api/core";

const userData = await invoke<UserData>("get_user_data", { userId: "123" });
```

### Events (Pub/Sub Pattern)
For real-time communication:

**Backend (Rust):**
```rust
app_handle.emit("user-updated", user_data).unwrap();
```

**Frontend (TypeScript):**
```typescript
import { listen } from "@tauri-apps/api/event";

listen("user-updated", (event) => {
    console.log("User updated:", event.payload);
});
```

## Development Workflow

### Adding New Commands
1. Create command function in `src-tauri/src/commands/`
2. Export in `src-tauri/src/commands/mod.rs`
3. Register in `src-tauri/src/main.rs` invoke handler
4. Call from frontend using `invoke()`

### Development Commands
```bash
# Start development server
bun tauri dev

# Build for production  
bun tauri build

# Type checking
bun typecheck
```

### Key Differences from Web Development

| Web Apps | Tauri Apps |
|----------|------------|
| REST/GraphQL APIs | `invoke()` commands |
| WebSockets | `listen()`/`emit()` events |
| Network requests | Local IPC communication |
| CORS concerns | No CORS (same process) |
| Server deployment | Embedded Rust binary |

## File Structure

- **Commands**: `src-tauri/src/commands/` - All backend command functions
- **Main**: `src-tauri/src/main.rs` - Application entry point and command registration
- **Frontend**: `src/` - React components and TypeScript code
- **Config**: `src-tauri/tauri.conf.json` - Tauri configuration

## Security Model

- Commands are explicitly registered in `main.rs`
- CSP controls frontend access
- Capabilities system restricts backend access
- No network requests needed (everything is local)

## Error Handling

**Backend:**
```rust
#[tauri::command]
pub fn risky_operation() -> Result<String, String> {
    if some_condition {
        Ok("Success!".to_string())
    } else {
        Err("Error message".to_string())
    }
}
```

**Frontend:**
```typescript
try {
    const result = await invoke("risky_operation");
    console.log("Success:", result);
} catch (error) {
    console.error("Error:", error);
}
```